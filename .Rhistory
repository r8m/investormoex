)
from<-reactive(
{
input$goButton
isolate({
if ((userSymbols2()=="")) return (NULL)
#REFRESH
if (initPosQty()==0) as.Date(symbol.trades()[1,1]) else as.Date("2016-09-15")
})
}
)
to<-reactive(
{
input$goButton
isolate({
if ((userSymbols2()=="")) return (NULL)
if (initPosQty()==-sum(symbol.trades()[,3])) as.Date(last(symbol.trades()[,1])) else Sys.Date()
})
}
)
# Chunk 6: download instr
ret<-reactive({
if ((userSymbols2()=="")) return (NULL)
progress <- shiny::Progress$new(session, min=0, max=10)
on.exit(progress$close())
progress$set(value=3,message="", detail = 'Загрузка истории...')
xxx<-getSymbols(symbols(), from=from(), to=to(), period=period(), src='mfd',adjust=TRUE, auto.assign=FALSE)
return (xxx)
})
symbol.tradesFinal<-reactive({
if (userSymbols2()=="") return (NULL)
if (initPosQty()!=0) {
xxx.df<-as.data.frame(ret())
row.NAMES<-row.names(xxx.df)
#REFRESH
if (marketId()==2) first2<-grep("2016-09-15 19:",row.NAMES)[1]-1
else first2<-grep("2016-09-16", row.NAMES)[1]-1
new.order<-c(row.NAMES[first2],userSymbols2(),initPosQty(), xxx.df[first2,4])
userData2<-rbind(new.order,symbol.trades())
return (userData2)
}
else return (symbol.trades())
})
symbol.trades.xts<-reactive(
{
if (userSymbols2()=="") return (NULL)
ST<-xts(cbind(symbol.tradesFinal()$V4,symbol.tradesFinal()$V3),
order.by=as.POSIXct(symbol.tradesFinal()[,1]))
colnames(ST)<-c("TxnPrice","TxnQty")
return (ST)
}
)
# Chunk 7: portfolio
observe({
input$goButton
isolate({
if ((userSymbols2()=="")) return (NULL)
symbol<-userSymbols2()
assign(symbol,ret(), envir=.GlobalEnv)
currency("RUB")
stock(symbol,currency="RUB")
port<-port2()
acc<-acc2()
try(rm(list=c(paste0("portfolio.",port),
paste0("account.",acc)),
pos=.blotter), silent =FALSE)
initPortf(name=port,
symbols=symbol,
initPosQty = 0,
currency="RUB"
)
initAcct(name=acc,
portfolios=port,
initEq=initEq,
currency="RUB"
)
addTxns(port,symbol,TxnData=symbol.trades.xts(),verbose=FALSE)
updatePortf(port)
updateAcct(acc)
})
})
# Chunk 8: plotTS
renderUI(if (input$inter) highchartOutput("highchart") else plotOutput("plot"))
output$highchart<-renderHighchart({
if (userSymbols2()=="") return (NULL)
if (input$inter) ({
progress <- shiny::Progress$new(session, min=0, max=10)
on.exit(progress$close())
progress$set(value=9,message="", detail = 'Строим график...')
chart.Posn.my(port2(), userSymbols2())
})
})
output$plot<-renderPlot({
if (userSymbols2()=="") return (NULL)
if (!input$inter) ({
progress <- shiny::Progress$new(session, min=0, max=10)
on.exit(progress$close())
progress$set(value=9,message="", detail = 'Строим график...')
theme<-chart_theme()
# if (!input$outliers)
#{
theme$col$up.col<-'#0000ff'
theme$col$up.border<-'#0000ff'
theme$col$dn.col<-'#FAAC58'
theme$col$dn.border<-'#FAAC58'
#}
chart.Posn(port2(),
userSymbols2(),
theme=theme,
Dates=paste0(as.character(max(input$dateRange2[1],from())),
"/",as.character(min(to(),input$dateRange2[2])))
)
})
}
)
# Chunk 9: stats5
TS2<-reactive(
{
input$goButton
isolate(tradeStats(Portfolios =port2(), use="trades"))
}
)
dStats<-reactive(
{
input$goButton
isolate(dailyStats(Portfolios = port2(), use="equity"))
}
)
table.perf<-reactive({
if ((userSymbols2()=="")) return (NULL)
TS2<-TS2()[,-c(1:5)]
TS2<-round(t(TS2),2)
dStats2<-c(
"Средний результат",
"Медианный результат",
"Максимальный выигрыш",
"Максимальный проигрыш",
"Валовая прибыль",
"Валовый убыток",
"Ст. отклонение результата",
"% положительных",
"% отрицательных",
"Профит-фактор",
"Средний прибыльный результат",
"Медианный прибыльный результат",
"Средний убыточный результат",
"Медианный убыточный результат",
"Средний дневной результат",
"Медианный дневной результат",
"Ст. отклонение дн. результата",
"Шарп",
"Макс. просадка",
"Прибыль/макс. просадка",
"Среднее отношение выигрышных к проигрышным",
"Медианное отношение выигрышных к проигрышным",
"Макс. результат",
"Мин. результат",
"Текущ. результат")
a<-cbind(dStats2,TS2,round(t(dStats()[,-c(1:4)]),2))
colnames(a)<-c("Параметр","По трейдам","По дням")
return(a)
})
renderTable(table.perf())
# Chunk 10: VB1
renderValueBox(
{
valueBox(as.integer(TS2()[5]),
"Результат, в валюте контракта",
icon = "fa-pencil",
color =  "red")
}
)
# Chunk 11: VB2
renderValueBox(
{
# if (userSymbols2()=="") valueBox("","", color="red") else
valueBox(TS2()[3],"Сделок, шт.", color="red", icon="fa-reorder")
}
)
#
# Chunk 12: VB3
renderValueBox(
{
#  if (userSymbols2()=="") valueBox("","", color="red") else
valueBox(TS2()[4],"Трейдов, шт.", color="red", icon="fa-area-chart")
}
)
# Chunk 13: G1
renderGauge(gauge(as.numeric(dStats()[2]), min = 0, max = 64,
label="Дней в конкурсе", sectors=gaugeSectors(colors="warning")))
# Chunk 14: G2
renderGauge(gauge(as.numeric(dStats()[3]), min = 0, max = as.numeric(dStats()[2]),
label="Дни с прибылью"))
# Chunk 15: G3
renderGauge(gauge(as.numeric(dStats()[4]), min = 0, max = as.numeric(dStats()[2]),
label="Дни с убытком", sectors=gaugeSectors(colors="danger")))
# Chunk 16: perf
renderPlot({
if (userSymbols2()=="") return (NULL)
charts.PerformanceSummary.my(PortfReturns(acc2()), geometric = FALSE,main = "")
},res=100)
# Chunk 17: srez
srez<-reactive({
if (is.null(resdayS)) return (NULL) else
{
decl2<-filter(resdayS, trader_id==userId())
srez22<- ggplot(data=resdayS,aes(x = amount/1000, y=dohod_rub/1000))+
ylab("Доход, тыс.руб.")+
xlab("Старт.активы, тыс.руб.")+
geom_rug()+
facet_wrap(~contype_name,scales = "free")+
geom_point()+
geom_point(data = decl2,colour = 'red', size = 3)
return (srez22)
}
})
renderPlot(srez())
# Chunk 18: report
radioButtons('format', 'Формат:', c('HTML', 'Word'),inline = FALSE)
downloadLink('downloadReport', label = 'Загрузить отчет')
output$downloadReport <- downloadHandler(
filename = function() {
paste('my-report', sep = '.', switch(
input$format, PDF = 'pdf', HTML = 'html', Word = 'docx'
))
},
content = function(file) {
src <- normalizePath('report/report.Rmd')
owd <- setwd(tempdir())
on.exit(setwd(owd))
file.copy(src, 'report.Rmd')
out <- render('report.Rmd', switch(
input$format,
PDF = pdf_document(), HTML = html_document(), Word = word_document()
))
file.rename(out, file)
}
)
# Chunk 19: support
tags$iframe(
src="https://money.yandex.ru/embed/donate.xml?account=410011860379477&quickpay=donate&payment-type-choice=on&default-sum=&targets=%D0%9F%D0%BE%D0%B6%D0%B5%D1%80%D1%82%D0%B2%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5+%D0%BD%D0%B0+%D1%80%D0%B0%D0%B7%D0%B2%D0%B8%D1%82%D0%B8%D0%B5+%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B0&target-visibility=on&project-name=&project-site=&button-text=01&comment=on&hint=%D0%92%D0%B0%D1%88%D0%B5+%D0%BF%D0%BE%D0%B6%D0%B5%D0%BB%D0%B0%D0%BD%D0%B8%D0%B5+%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D1%83&successURL=",
width="500",
height="175",
frameborder="0",
allowtransparency="true",
scrolling="no"
)
#tags$head(tags$script(src = "google-analytics.js"))
#
load("https://github.com/r8m/rltrading/raw/master/resDT.RData")
statLink<-"https://github.com/r8m/rltrading/raw/master/resDT.RData"
download.file(statLink, "resDT.RData")
load("resDT.RData")
resData
resDT
library(data.table)
resDT[s,"nik"]
s=1
resDT[s,"nik"]
resDT[s,nik]
setwd("~/repo/shinyLCHI(AlexeyT)/new")
if (!local) encoding<-"" else encoding<-"CP1251"
library(FinancialInstrument)
library(PerformanceAnalytics)
library(rusquant)
library(blotter)
#library(ggplot2)
library(dplyr)
#library(rmarkdown)
library(quantmod)
#library(highcharter)
#library(markdown)
library(data.table)
#library(DT) # install.packages('DT')
#library(flexdashboard) # devtools::install_github('rstudio/flexdashboard')
source("func.my.R",encoding = "UTF-8")
source('makeportfolio.R',encoding = "UTF-8")
data(tickers)
markets<-c("Срочный"=2, "Фондовый"=1, "Валютный"=3)
TradesLink<-"ftp://ftp.moex.com/pub/info/stats_contest"
yearId<-2016
dateId<-"all"
initEq<-100000
if (!exists('.blotter')) .blotter <- new.env()
userPortf<-"user_port"
userAcc<-"user_acc"
spot<-read.table("spot.csv", header=TRUE, sep=";", as.is=TRUE,encoding = "UTF-8")
#write.table(spot,file="spot.csv",sep=";",row.names = F )
#REFRESH
resday<-read.table("ftp://ftp.moex.com/pub/info/stats_contest/2016/result_day.csv",
header=TRUE
, sep=";",
dec=".",
quote="",
as.is=TRUE,
fileEncoding = encoding,
skipNul=TRUE
)
if (!is.null(resday))
resday %>%
select(trader_id,contype_name,dohod_rub,amount) %>%
filter (dohod_rub!=0) -> resdayS
if (!is.null(resday))
resday %>%
select(contype_name,trader_id,	nik,	diler_name,	date_start,	dohod,	amount,	dohod_rub,	count_deal,	qty,	vol_rub, duel_win,	duel_loss) %>%
filter(as.numeric(dohod_rub)!=0) %>%
filter(as.numeric(count_deal)>100) -> resdayAll
timerStart<-Sys.time()
statDT<-data.table(resdayAll)
statDT[, marketId:=ifelse(contype_name=="Срочный", 2, ifelse(contype_name=="Фондовый", 1,3))]
#statDT<-statDT[1:10]
allU<-statDT[,.N]
# resDT<-rbindlist(lapply(1:statDT[,.N],
#                         FUN = function(x) {makePortfolio(yearId,
#                                                         statDT[x,trader_id],
#                                                         statDT[x,marketId],
#                                                         statDT[x,nik],
#                                                         statDT[x,amount],
#                                                         strptime(resday$moment[1], "%d.%m.%Y"),
#                                                         "10min" )
#                           #print(paste(x,allU,sep=" / "))
#                           }
#                         ))
setwd("~/repo/shinyLCHI(AlexeyT)/new")
####Table with Statistics############
local<-TRUE
if (!local) encoding<-"" else encoding<-"CP1251"
library(FinancialInstrument)
library(PerformanceAnalytics)
library(rusquant)
library(blotter)
#library(ggplot2)
library(dplyr)
#library(rmarkdown)
library(quantmod)
#library(highcharter)
#library(markdown)
library(data.table)
#library(DT) # install.packages('DT')
#library(flexdashboard) # devtools::install_github('rstudio/flexdashboard')
source("func.my.R",encoding = "UTF-8")
source('makeportfolio.R',encoding = "UTF-8")
data(tickers)
markets<-c("Срочный"=2, "Фондовый"=1, "Валютный"=3)
TradesLink<-"ftp://ftp.moex.com/pub/info/stats_contest"
yearId<-2016
dateId<-"all"
initEq<-100000
if (!exists('.blotter')) .blotter <- new.env()
userPortf<-"user_port"
userAcc<-"user_acc"
spot<-read.table("spot.csv", header=TRUE, sep=";", as.is=TRUE,encoding = "UTF-8")
#write.table(spot,file="spot.csv",sep=";",row.names = F )
#REFRESH
resday<-read.table("ftp://ftp.moex.com/pub/info/stats_contest/2016/result_day.csv",
header=TRUE
, sep=";",
dec=".",
quote="",
as.is=TRUE,
fileEncoding = encoding,
skipNul=TRUE
)
if (!is.null(resday))
resday %>%
select(trader_id,contype_name,dohod_rub,amount) %>%
filter (dohod_rub!=0) -> resdayS
if (!is.null(resday))
resday %>%
select(contype_name,trader_id,	nik,	diler_name,	date_start,	dohod,	amount,	dohod_rub,	count_deal,	qty,	vol_rub, duel_win,	duel_loss) %>%
filter(as.numeric(dohod_rub)!=0) %>%
filter(as.numeric(count_deal)>100) -> resdayAll
timerStart<-Sys.time()
statDT<-data.table(resdayAll)
statDT[, marketId:=ifelse(contype_name=="Срочный", 2, ifelse(contype_name=="Фондовый", 1,3))]
#statDT<-statDT[1:10]
allU<-statDT[,.N]
statDT<-data.table(resdayAll)
statDT[as.numeric(count_deal)>100]
load("file="resDT.RData")
load(file="resDT.RData")
resDT
resDT[,{}]
resDT[,{ee:=1}]
resDT
resDT[,{
ee:=Num.Txns
qq:=Num.Trades
}]
resDT[,{ee:=Num.Txns
qq:=Num.Trades}]
resDT[,.(ee:=1, er:=2)]
help(":=")
resDT[,`:=`(ee:=1,
er:=2)]
resDT[,`:=`(ee=1,
er=2)]
resDT
resDT[,`:=`(ee=NULL,
er=NULL)]
resDT
1%
cols<-c("moment",
"contype_name",
"trader_id",
"nik",
"tickerqty",
"diler_name",
"date_start",
"dohod",
"amount",
"dohod_rub",
"count_deal",
"qty",
#"vol_rub",
#"duel_win",
#"duel_loss",
#"nickname",
"ticker",
"Num.Txns",
"Num.Trades",
"Net.Trading.PL",
"Percent.Positive" ,
"Percent.Negative" ,
"Profit.Factor",
"Max.Drawdown"  ,
"Max.Equity",
"Min.Equity" ,
"End.Equity")
resDT<-resDT[,.SD, .SDcols=cols] [order(-Profit.Factor)]
resDT[,`:=`(dohod=round(dohod,1),
amount=round(amount,2),
dohod_rub=round(dohod_rub,2),
Net.Trading.PL=round(Net.Trading.PL,2),
Percent.Positive=round(Percent.Positive,1) ,
Percent.Negative=round(Percent.Negative,1) ,
Profit.Factor=round(Profit.Factor,1),
Max.Drawdown=round(Max.Drawdown,2),
Max.Equity=round(Max.Equity,2),
Min.Equity=round(Min.Equity,2),
End.Equity=round(End.Equity,2))]
resDT
load(file="resDT.RData")
cols<-c("moment",
"contype_name",
"trader_id",
"nik",
"tickerqty",
#"diler_name",
"date_start",
"dohod",
"amount",
"dohod_rub",
"count_deal",
"qty",
#"vol_rub",
#"duel_win",
#"duel_loss",
#"nickname",
"ticker",
"Num.Txns",
"Num.Trades",
"Net.Trading.PL",
"Percent.Positive" ,
"Percent.Negative" ,
"Profit.Factor",
"Max.Drawdown"  ,
"Max.Equity",
"Min.Equity" ,
"End.Equity")
resDT<-resDT[,.SD, .SDcols=cols] [order(-Profit.Factor)]
resDT
cols<-c("moment",
"contype_name",
"trader_id",
"nik",
"tickersqty",
#"diler_name",
"date_start",
"dohod",
"amount",
"dohod_rub",
"count_deal",
"qty",
#"vol_rub",
#"duel_win",
#"duel_loss",
#"nickname",
"ticker",
"Num.Txns",
"Num.Trades",
"Net.Trading.PL",
"Percent.Positive" ,
"Percent.Negative" ,
"Profit.Factor",
"Max.Drawdown"  ,
"Max.Equity",
"Min.Equity" ,
"End.Equity")
resDT<-resDT[,.SD, .SDcols=cols] [order(-Profit.Factor)]
resDT[,`:=`(dohod=round(dohod,1),
amount=round(amount,2),
dohod_rub=round(dohod_rub,2),
Net.Trading.PL=round(Net.Trading.PL,2),
Percent.Positive=round(Percent.Positive,1) ,
Percent.Negative=round(Percent.Negative,1) ,
Profit.Factor=round(Profit.Factor,1),
Max.Drawdown=round(Max.Drawdown,2),
Max.Equity=round(Max.Equity,2),
Min.Equity=round(Min.Equity,2),
End.Equity=round(End.Equity,2))]
save(resDT, file="resDT.RData")
